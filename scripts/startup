import os
import sys
import types
import copy
import __main__
from pprint import pprint

import numpy as np
import pylab as pl
import matplotlib as mpl
from numpy import arange, array, asarray, log, rand, randn, zeros, ones, diff, concatenate, concatenate as cat, histogram
from pylab import figure, plot, hist, bar, barh, xlabel, ylabel, xlim, ylim, title, gca

# set some numpy options
np.set_printoptions(precision=8)
np.set_printoptions(threshold=1000)
np.set_printoptions(edgeitems=5)
np.set_printoptions(linewidth=150)
np.set_printoptions(suppress=True)

#import deep_reload # modifies __builtin__.reload() to do a deep reload
#import LazyPython
#sys.excepthook = LazyPython.LazyPython() # this doesn't seem to work

def who():
    """Print all names in namespace"""
    import __main__
    print __main__.__dict__.keys()

def whos():
    """Print all names in namespace, with details"""
    exec 'pprint(locals())' in globals()

def cd(path):
    """Change directories"""
    path = path.replace('~', 'C:/home/mspacek') # '~' is a shortcut to home
    if path == '..': # go down one directory
        path = '\\'.join(os.getcwd().split('\\')[0:-1])
    try:
        os.chdir(os.getcwd() + path) # path is relative?
    except OSError:
        os.chdir(path) # nope, path is absolute

cd('c:/home/mspacek/Desktop')

def pwd():
    """Print working directory"""
    print os.getcwd()

def ls():
    """List directory contents"""
    pwd()
    print os.listdir(os.getcwd())

def ll():
    """Long-list directory contents"""
    pwd()
    pprint(os.listdir(os.getcwd()))

def src(obj):
    """Print object's source code"""
    try:
        import inspect
        source = inspect.getsource(obj)
    except TypeError: # probalby a builtin
        print obj
        return
    except IOError: # probably entered interactively, no source file
        print obj
        return
    print inspect.getfile(obj) + ':'
    print
    print source

clr = shell.clear

def refresh(modname):
    """Deletes all modules with 'modname' in their file path (mod.__file__ attrib), then re-imports the module"""
    print 'refreshing %s' % modname
    for key, mod in sys.modules.items():
        try:
            if mod.__file__.count(modname):
                print 'deleting', mod
                del sys.modules[key]
        except AttributeError: # some modules don't have a .__file__ attrib
            pass
    __import__(modname, globals(), locals(), []) # this is equivalent to "import modname", yet accepts a string for modname
    print '%s refreshed' % modname

def cf():
    """Closes all figures"""
    pl.close('all')
    print 'all figures closed'

def c():
    """Clears all names added to the namespace after the '_original' point"""
    import __main__
    import copy
    md = __main__.__dict__
    for key in md.keys():
        if key not in _original and key != '_original':
            del md[key]
            #print 'deleted md key:', key
    print 'namespace cleared'

import neuropy

_original = __main__.__dict__.keys()

from neuropy import *

